// Test simple pour v√©rifier que NodeCoachingsRepo fonctionne
import { NodeCoachingsRepo } from './src/logic/infra/repos/nodeapi/NodeCoachingsRepo.js';

const repo = new NodeCoachingsRepo();

// Test de r√©cup√©ration des coachings
async function testFindAllCoachings() {
  try {
    console.log('Test: R√©cup√©ration de tous les coachings...');
    const coachings = await repo.findAllCoachings();
    console.log('‚úÖ Coachings r√©cup√©r√©s:', coachings.length);
    console.log('Premier coaching:', coachings[0]);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des coachings:', error);
  }
}

// Test de cr√©ation d'un coaching
async function testCreateCoaching() {
  try {
    console.log('Test: Cr√©ation d\'un coaching...');
    const newCoaching = await repo.createCoaching({
      name: 'Test Coaching',
      description: 'Description de test',
      link: 'https://example.com',
      price: 1500, // 15‚Ç¨
      startAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // +1 jour
      endAt: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(), // +1 jour + 1 heure
    });
    console.log('‚úÖ Coaching cr√©√©:', newCoaching);
    return newCoaching;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du coaching:', error);
    return null;
  }
}

// Test de mise √† jour d'un coaching
async function testUpdateCoaching(coachingId) {
  if (!coachingId) return;
  
  try {
    console.log('Test: Mise √† jour du coaching...');
    const updatedCoaching = await repo.updateCoaching(coachingId, {
      name: 'Test Coaching Modifi√©',
      description: 'Description modifi√©e',
    });
    console.log('‚úÖ Coaching mis √† jour:', updatedCoaching);
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du coaching:', error);
  }
}

// Test de suppression d'un coaching
async function testDeleteCoaching(coachingId) {
  if (!coachingId) return;
  
  try {
    console.log('Test: Suppression du coaching...');
    await repo.deleteCoaching(coachingId);
    console.log('‚úÖ Coaching supprim√©');
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du coaching:', error);
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests NodeCoachingsRepo...\n');
  
  await testFindAllCoachings();
  console.log('');
  
  const newCoaching = await testCreateCoaching();
  console.log('');
  
  if (newCoaching) {
    await testUpdateCoaching(newCoaching.id);
    console.log('');
    
    await testDeleteCoaching(newCoaching.id);
    console.log('');
  }
  
  console.log('üèÅ Tests termin√©s !');
}

// Ex√©cuter les tests si le fichier est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllTests();
}

export { runAllTests };
